from os.path import join
import os

configfile: config["cfp"]     
           
# Parse the configuration variables
outdir = config["outdir"]
samtools = config["samtools"]
mitochrs = config["mitochrs"]
project_name = config["project_name"]

aligned_reads = outdir + "/02_aligned_reads"


# Need to update these at some point
mitoQual = "40"
bcftools = "bcftools"
tabix = "tabix"


# A Snakemake regular expression matching the bam files that were all aligned
SAMPLES, = glob_wildcards(join(aligned_reads, "{sample}.all.sorted.bam"))

bamin = '{sample}.all.sorted.bam'

rule all:
    input:
        outdir + "/03_processed_reads/mito/All.SNPs.MNP.clean.txt.gz"

rule filter_mito_chr:
    input:
        bam = join(aligned_reads, bamin)
    output:
        bam = outdir + "/03_processed_reads/mito/{sample}.mito.bam",
        bai = outdir + "/03_processed_reads/mito/{sample}.mito.bam.bai"
    threads: 1
    shell:
    	samtools + " view -b {input.bam} -o {output.bam} " + " ".join(str(i) for i in mitochrs) + " && " + samtools + " index {output.bam}"

rule make_samtools_list:
	input:
		expand(outdir + "/03_processed_reads/mito/{sample}.mito.bam", sample=SAMPLES)
	output:
		temp(outdir + "/03_processed_reads/mito/samplesForPileup.txt")
	threads: 1
	shell: 
		"ls -1 {input} >> {output}"
		
rule bam_to_vcf:
	input:
		outdir + "/03_processed_reads/mito/samplesForPileup.txt"
	output:
		vcf = temp(outdir + "/03_processed_reads/mito/All.SNPs.vcf.gz"), 
		ix = temp(outdir + "/03_processed_reads/mito/All.SNPs.vcf.gz.tbi")
	threads: 1
	shell:
		samtools + " mpileup -d8000 -r " + " ".join(str(i) for i in mitochrs) +" -B -Q " + mitoQual + " -C 50 -t AD,ADF,ADR --skip-indels -b {input} -v > {output.vcf} && " + tabix + " {output.vcf}"

rule bcftools_norm:
	input:
		vcf = outdir + "/03_processed_reads/mito/All.SNPs.vcf.gz", 
		ix = outdir + "/03_processed_reads/mito/All.SNPs.vcf.gz.tbi"
	output:
		temp(outdir + "/03_processed_reads/mito/All.SNPs.MNP.vcf.gz")
	threads:1
	shell:
		bcftools + " norm -m-both {input.vcf} > {output}"

rule bcftools_query:
	input:
		outdir + "/03_processed_reads/mito/All.SNPs.MNP.vcf.gz"
	output:
		temp(outdir + "/03_processed_reads/mito/All.SNPs.MNP.txt")
	threads:1
	shell:
		bcftools + " query -f '[%CHROM\t%POS\t%ALT\t%SAMPLE\tINFO/%AD\n]' {input} > {output}"

rule variant_cleanup:
	input:
		outdir + "/03_processed_reads/mito/All.SNPs.MNP.txt"
	output:
		outdir + "/03_processed_reads/mito/All.SNPs.MNP.clean.txt.gz"
	threads:1
	shell:
		'''cat {input} | sed -e 's/INFO\///g' -e 's/\.mito.bam//g' -e 's/,/\t/g' | awk '{{print $4,$2,$3,$6}}'  | awk -F'03_processed_reads/mito/' '{{print $2}}' | gzip > {output}'''



# rule make_summary_txt:
# 	input:
# 		expand(outdir + "/03_processed_reads/mito/{sample}.mito.bam", sample=SAMPLES)
# 	output:
# 		outdir + "/03_processed_reads/mito/" + project_name + ".mitoreads.txt"
# 	threads: 1
# 	run:
# 		with open(output[0], 'w') as out:
# 			for i in input:
# 				sample = (i.split('/03_processed_reads/mito/')[1]).split('.')[0]
# 				lns = os.popen(samtools + " view " + i + " | wc -l").read().strip()
# 				out.write(sample + '\t' + lns + '\n')

